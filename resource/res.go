package resource

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _resource_default_zz_lua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xd9\x6e\xdb\x30\x10\x7c\xd7\x57\x10\x7a\x99\x14\x58\x07\x52\xda\xa0\x31\x8a\x14\xc8\xe1\xfb\xec\x7d\xa1\x0f\x54\x4c\x3b\x44\x28\xca\x90\xa8\xb6\x42\xe0\x7f\x2f\x96\x92\x65\x1b\x7d\xa8\x01\x0f\x46\xdc\x59\x2e\x67\x48\x27\x13\xa3\x0a\x71\x2d\x9e\x03\x51\xff\x3a\x1d\x61\x65\xca\x6b\x6f\xc5\x0f\xdc\x80\x70\x0b\xc2\x1d\x08\xf7\x20\xf4\x40\xe8\x83\x30\x00\x61\x08\xc2\x08\x84\x31\x08\x13\x10\xa6\x20\xcc\x40\x98\x83\xb0\x00\x61\x09\xc2\x3b\x10\xde\x83\xf0\x01\x84\x8f\x20\x7c\x02\xe1\x33\x08\x5f\x40\xf8\x0a\xc2\x37\x10\xbe\x83\x04\x6e\x6e\x18\x6f\x6f\x19\xef\xee\x18\xef\xef\x19\x7b\x3d\xc6\x7e\x9f\x71\x30\x60\x1c\x0e\x19\x47\x23\xc6\xf1\x98\x71\x32\x61\x9c\x4e\x19\x67\x33\xc6\xf9\x9c\x71\xb1\x60\x5c\x2e\xf1\x93\xf6\xee\xd8\x5e\x51\x6e\xb7\x59\xee\x44\xd4\x2e\xe6\xd9\x6f\x9f\x41\x4c\x22\x8e\x48\x5c\xf0\xff\x92\xc4\x65\x44\xe2\xf5\x25\xaf\x45\xbb\xc3\x0e\x0f\x8f\x32\x2f\x94\xf3\x0d\x28\xdd\xfa\x8a\x87\x18\xe9\xb4\x8d\x99\x25\xda\xca\xbc\xc2\x51\xc3\x56\xe6\x4e\x3b\x9d\xd9\xa6\xc5\xae\xd4\x9a\xeb\xbb\x37\x41\xb0\xd6\xca\xac\x0e\xf9\xbb\x6a\x5b\xdf\x06\xb4\x75\xbc\x9b\xd3\xb6\x6a\x68\x91\x4a\x63\x1a\x9e\xe8\x4d\xc3\x56\xea\x41\xa7\xd2\x9c\xbd\xf2\xe7\x7e\x81\x66\x2c\xd6\x26\x93\xb5\x20\x2b\x13\xa3\x98\xf1\xc1\xcf\xbc\x46\xe0\x97\xcc\x8f\x3f\x95\x2d\x53\x3f\x43\xd5\x3d\xd2\x29\xa7\x53\xb5\xdf\x4d\x20\xc9\x32\x03\x12\x7c\xa0\x54\x15\x4e\xa6\x5b\xd6\x55\x4a\xe6\x7b\x3d\x3b\xf2\xea\x42\x6f\xac\xb7\xc0\x44\xad\xb8\x5e\xda\x86\x37\xa9\x3c\xa9\xaa\x60\xc5\x93\xaa\x40\xfb\x40\x82\x5d\x10\xac\xa4\x93\x6d\x18\xb6\x4c\x13\x95\xd7\x71\xd8\xd2\x98\x93\x3c\xda\x74\x11\x5f\x9c\x77\xbb\x3e\xfa\xf8\x3c\x8a\xba\x4c\x3a\xdd\xf3\xf8\xea\x25\x08\x11\x08\x9d\x18\x84\x18\xbe\xa1\x99\xcf\x76\xaf\x9f\x11\x56\x21\x08\x61\x12\x7a\x01\x21\xfc\xe3\xbf\x79\x56\xd8\x5e\x20\x3b\x6f\xde\x46\x44\x82\x6b\x87\xab\x65\xff\x27\xc7\xf3\x81\x1c\xea\xfb\x1c\x4f\x34\x6d\xb8\x07\x5d\x1b\xea\xff\x84\xbc\xf4\x8f\xe6\xa8\x5e\xb8\x5c\xdb\xcd\x69\x64\x46\x39\xa7\xf2\xfa\x96\x37\x46\x17\x8f\x8d\xdb\xc8\xbf\xc1\xbf\x01\x00\x00\xff\xff\x4d\x1f\xdb\x76\x01\x04\x00\x00")

func resource_default_zz_lua() ([]byte, error) {
	return bindata_read(
		_resource_default_zz_lua,
		"resource/default.zz.lua",
	)
}

var _resource_english_txt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\x90\xd1\x0d\xe4\x20\x0c\x44\xff\x5f\x23\xa9\x65\xcb\x70\x82\x37\xe6\x02\xf8\x04\xe4\x10\xdd\x9f\xbc\x3f\xcf\x03\x96\x47\xa3\x91\xd3\xdf\x89\x94\x82\xb4\x84\x74\x45\x06\x32\x11\x4e\xb9\x1e\x4e\xbd\xe4\x1d\xca\xa9\xda\x38\x95\xf3\x9d\x5c\xd2\x8e\x1f\xb9\xbc\x2a\x97\xbf\x25\x91\x72\x8a\xdf\x94\x13\xc9\x7f\xca\xf9\x7a\xe7\xdb\xbd\x72\xeb\xe4\xf6\xdc\x6e\x6e\xf7\xc4\xed\xf1\xc4\x24\x61\xf2\x4f\x31\x3d\x06\xa6\x3d\x54\xc7\x74\x63\x8a\xe5\x8a\xe5\x81\xf9\xe2\x73\x94\xc2\xe7\xa8\xe4\x2f\xb9\x91\x07\x79\x1e\x01\x32\x7f\xde\x31\x79\x9a\x2f\x4a\x7e\x94\xe2\xfe\x50\x55\x1a\x55\xa9\x9b\xe6\x93\x58\x36\xc7\xbf\xb8\xe1\x8f\x6c\xfc\xc1\x9b\xe2\x0d\xef\x44\x01\x5d\xa5\x94\x4d\xcf\xb7\x4d\x86\x6c\x86\x2a\xc3\x94\xe1\x55\xa7\x45\xf4\x50\x0c\x67\x6a\x29\x4c\x93\x48\x10\x83\x69\xda\x02\x5d\x83\x3b\x40\x9c\x3c\xc1\xc1\xcc\x55\x99\xce\xfb\x97\x25\x6d\xb2\x64\xb0\xc2\x63\xc5\xc5\x52\x56\x98\xac\x30\x59\xe6\x2c\xdb\xac\x1c\xeb\x3c\x8d\xf5\x2b\x77\xab\x18\x5b\x07\xdb\xdf\xa3\x6b\x8c\x1e\xf8\x1f\x00\x00\xff\xff\x65\xfb\xee\xbe\xbd\x01\x00\x00")

func resource_english_txt() ([]byte, error) {
	return bindata_read(
		_resource_english_txt,
		"resource/english.txt",
	)
}

var _resource_expression_zz_lua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x52\xc1\x6a\xdc\x30\x10\xbd\xef\x57\x0c\xbe\x4c\x0a\xda\x45\x4a\x7a\x88\x29\x39\x84\x10\xc8\xad\x90\x04\x7a\x96\xe3\xd9\x8d\x88\x2c\x2f\x92\xdc\xd6\x04\xff\x7b\x19\x49\xb6\xd7\xf4\x90\xdb\x93\xde\x1b\xcf\x7b\xcf\x8a\xba\xb1\x14\xe0\x0e\x3e\x77\x00\x00\xbe\xff\x93\x0e\x4a\x80\x92\x02\xae\xa5\x80\x1b\x29\xa0\x96\x93\x48\xfc\x7e\x0f\x2f\x4f\x3f\x7f\xc1\xc3\xd3\xfd\xf3\xfd\xc3\xeb\xe3\x33\xbc\x3c\xbe\xfe\x48\xd4\xdb\xbb\xf6\x81\x62\x1a\xc7\x21\x1e\x6f\x71\x9d\x39\x6b\x1f\x4d\x34\xbd\x03\x37\x74\x0d\xf9\x74\xbf\x5c\x96\x11\xd7\xd2\x91\x67\xa6\xdd\xee\x68\xc8\xb6\xab\xab\x38\x9e\xb3\x47\x34\x2e\xa2\x00\x8c\xc6\x8d\x05\x86\x4e\x5b\x5b\x70\x63\x4e\x05\xb5\xf4\x66\x3a\x6d\xaf\xbe\xa7\x10\xdf\x30\x3b\x01\x3c\xda\x5e\x67\x41\x3f\x34\x96\x18\xb1\xef\xab\xa4\x01\xfc\xad\xfd\xe5\x91\xdc\xd0\xa5\x1d\x94\x67\x74\xa4\x68\x3a\x9a\xbf\x06\xd8\xf4\xbd\x45\x01\x6c\xa8\xa3\x10\x75\x77\x66\xdd\x48\xda\xcf\x7a\x0e\x94\xd4\xc1\x9c\x5c\x8a\xc0\x80\x5a\xe6\x07\x57\x70\x29\xea\x83\xc6\xc0\x8a\x0f\x1a\x71\xe2\x1a\x5a\x1d\xf5\x52\x42\x6e\x2e\xd7\xe0\x06\x6b\x37\x3d\x14\x43\x00\xa8\xae\x0f\x75\xad\x98\x54\x07\x29\x6b\x06\xfb\xfa\xa0\x6e\x6f\x50\xa0\x44\x81\x7b\x85\x02\x15\xa6\x81\xb2\x97\x63\xde\x7d\x62\x35\x56\x28\xb0\x6a\xaa\x24\x10\x58\xfd\x4d\x67\xde\x55\xcd\x16\x81\x13\x97\x07\x22\x05\x30\x37\x2d\xcb\x39\xf7\xc6\x5e\x2a\x62\xe5\xe7\xfe\x36\x9a\xa5\xd4\x55\xb7\x94\xf9\x95\x90\xaf\xfe\xd3\x5c\xf0\x21\x7a\xe3\x4e\xdb\xca\x2c\xc5\x48\x3e\xff\xdd\x93\x35\xe1\xbd\xa4\x95\xf9\xe9\xfd\x0b\x00\x00\xff\xff\x15\xbf\x6e\xd6\x10\x03\x00\x00")

func resource_expression_zz_lua() ([]byte, error) {
	return bindata_read(
		_resource_expression_zz_lua,
		"resource/expression.zz.lua",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"resource/default.zz.lua": resource_default_zz_lua,
	"resource/english.txt": resource_english_txt,
	"resource/expression.zz.lua": resource_expression_zz_lua,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resource": &_bintree_t{nil, map[string]*_bintree_t{
		"default.zz.lua": &_bintree_t{resource_default_zz_lua, map[string]*_bintree_t{
		}},
		"english.txt": &_bintree_t{resource_english_txt, map[string]*_bintree_t{
		}},
		"expression.zz.lua": &_bintree_t{resource_expression_zz_lua, map[string]*_bintree_t{
		}},
	}},
}}
