package resource

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _resource_default_zz_lua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x91\xcf\x8a\xe2\x40\x10\xc6\xef\x3e\x45\xd1\x97\x72\xa1\x23\x69\xdd\x83\x61\xf1\x20\x22\x78\x5b\x50\x61\xce\x1d\x53\x89\x8d\x6d\x47\x92\xce\xcc\x04\xf1\xdd\x87\xaa\x44\x9d\x5c\xfa\xab\x3f\x5f\xd5\xaf\x48\xb4\xb9\xa7\x16\x56\x70\x9f\x00\x00\x34\xf5\x97\x04\x46\x83\x49\x35\xcc\x53\x0d\x8b\x54\x43\x96\x3e\xb4\xd4\x93\x04\x0e\xbb\xff\x1f\xb0\xd9\xad\xf7\xeb\xcd\x71\xbb\x87\xc3\xf6\xf8\x4f\x4a\xa7\xb3\x6d\x5a\x8a\x62\xc7\x2e\x96\x4b\x7c\x7b\x6e\xb6\x89\x2e\xba\x3a\x40\xe8\xae\x39\x35\x92\x7f\x25\x47\x4b\x28\xa8\x64\xcf\x63\x32\x29\x1d\xf9\xe2\x4d\x15\xfb\xdb\xc0\x88\x2e\x44\xd4\x98\xbb\x4a\x04\x60\xe9\x6b\x2b\xa2\xa8\xbb\xdc\x93\x28\x3a\xb9\xab\xf5\xd3\xbf\xc2\xff\x07\x07\x08\xfe\x90\x11\xa7\x92\x03\xfc\xb4\xcd\xef\x90\x42\x77\x7d\x02\xb7\xae\x0a\xb2\x8d\x05\x15\x5c\xee\xc2\xa8\xc7\x96\x0b\xf5\x2d\x77\x5c\xa8\xc7\x07\x13\x17\x36\xda\x17\xef\x70\xe4\x40\x1c\x3a\xef\x79\x42\x74\xa1\x17\xe8\x37\x8e\x99\xcf\xb2\xcc\x70\xd1\xcc\xd2\x34\x63\x91\x64\x33\xb3\x5c\xa0\xc6\x14\x35\x26\x06\x35\x1a\x14\xc3\xb8\x97\x31\x57\x77\x54\xbd\x42\x8d\x2a\x57\xd2\xa0\x51\x7d\x4b\xcc\xbb\xd4\xeb\x8a\xd8\xb8\x50\x0d\x10\xca\xe6\x27\xc5\xf3\xd5\x99\xbc\xaf\x07\x99\xbb\x4a\x5c\xd5\xf0\x14\x85\x3c\x44\xcf\xa1\x8c\x20\xf4\xf2\x4f\x7e\x02\x00\x00\xff\xff\x34\x38\xd6\x6a\x29\x02\x00\x00")

func resource_default_zz_lua() ([]byte, error) {
	return bindata_read(
		_resource_default_zz_lua,
		"resource/default.zz.lua",
	)
}

var _resource_english_txt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x1c\x90\xd1\x0d\xe4\x20\x0c\x44\xff\x5f\x23\xa9\x65\xcb\x70\x82\x37\xe6\x02\xf8\x04\xe4\x10\xdd\x9f\xbc\x3f\xcf\x03\x96\x47\xa3\x91\xd3\xdf\x89\x94\x82\xb4\x84\x74\x45\x06\x32\x11\x4e\xb9\x1e\x4e\xbd\xe4\x1d\xca\xa9\xda\x38\x95\xf3\x9d\x5c\xd2\x8e\x1f\xb9\xbc\x2a\x97\xbf\x25\x91\x72\x8a\xdf\x94\x13\xc9\x7f\xca\xf9\x7a\xe7\xdb\xbd\x72\xeb\xe4\xf6\xdc\x6e\x6e\xf7\xc4\xed\xf1\xc4\x24\x61\xf2\x4f\x31\x3d\x06\xa6\x3d\x54\xc7\x74\x63\x8a\xe5\x8a\xe5\x81\xf9\xe2\x73\x94\xc2\xe7\xa8\xe4\x2f\xb9\x91\x07\x79\x1e\x01\x32\x7f\xde\x31\x79\x9a\x2f\x4a\x7e\x94\xe2\xfe\x50\x55\x1a\x55\xa9\x9b\xe6\x93\x58\x36\xc7\xbf\xb8\xe1\x8f\x6c\xfc\xc1\x9b\xe2\x0d\xef\x44\x01\x5d\xa5\x94\x4d\xcf\xb7\x4d\x86\x6c\x86\x2a\xc3\x94\xe1\x55\xa7\x45\xf4\x50\x0c\x67\x6a\x29\x4c\x93\x48\x10\x83\x69\xda\x02\x5d\x83\x3b\x40\x9c\x3c\xc1\xc1\xcc\x55\x99\xce\xfb\x97\x25\x6d\xb2\x64\xb0\xc2\x63\xc5\xc5\x52\x56\x98\xac\x30\x59\xe6\x2c\xdb\xac\x1c\xeb\x3c\x8d\xf5\x2b\x77\xab\x18\x5b\x07\xdb\xdf\xa3\x6b\x8c\x1e\xf8\x1f\x00\x00\xff\xff\x65\xfb\xee\xbe\xbd\x01\x00\x00")

func resource_english_txt() ([]byte, error) {
	return bindata_read(
		_resource_english_txt,
		"resource/english.txt",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"resource/default.zz.lua": resource_default_zz_lua,
	"resource/english.txt": resource_english_txt,
}
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() ([]byte, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"resource": &_bintree_t{nil, map[string]*_bintree_t{
		"default.zz.lua": &_bintree_t{resource_default_zz_lua, map[string]*_bintree_t{
		}},
		"english.txt": &_bintree_t{resource_english_txt, map[string]*_bintree_t{
		}},
	}},
}}
